
digraph ReactorNetworkServer {
    rankdir=LR;
    node [shape=box, fontname="Helvetica"];

    ServerMain [label="server.cpp\nmain() -> EchoServer / TCPServer"];
    EchoServer [label="EchoServer\n(业务层)\n+sets callbacks -> TCPServer"];
    TCPServer [label="TCPServer\n+owns: EventLoop, Acceptor, connections map\n+API: start(), newConnection()"];
    EventLoop [label="EventLoop\n+owns: Epoll\n+run()\n+updateChannel()"];
    Epoll [label="Epoll\n+epollfd\n+events[]\n+update()/wait()"];
    Acceptor [label="Acceptor\n+listen Socket\n+listen Channel\n+handleNewConnection()"];
    Channel [label="Channel\n+fd, events, revents\n+read/write callbacks\n+handleEvent()"];
    Connection [label="Connection\n+client Socket\n+client Channel\n+input/output Buffer\n+callbacks: onMessage,onClose,onError,onWriteComplete"];
    Socket [label="Socket\n+fd ops: bind/listen/accept/setnonblock\n+close()"];
    InetAddress [label="InetAddress\n+ip/port wrapper"];
    Buffer [label="Buffer\n+read()/append()/retrieve()\n+used by Connection"];
    ClientApp [label="client.cpp / client2.cpp\n(test clients)"];

    // creation & ownership
    ServerMain -> EchoServer [label="creates"];
    EchoServer -> TCPServer [label="creates / configures"];
    TCPServer -> Acceptor [label="creates (m_acceptor)"];
    TCPServer -> EventLoop [label="owns (m_loop)"];
    EventLoop -> Epoll [label="owns"];
    Acceptor -> Socket [label="creates listen Socket"];
    Acceptor -> Channel [label="creates listen Channel"];

    // runtime flows
    Acceptor -> TCPServer [label="on accept: new_connection_callback"];
    Acceptor -> Connection [label="accept -> new Connection()"];
    Connection -> Channel [label="creates client Channel"];
    Connection -> Socket [label="owns client Socket"];
    Connection -> Buffer [label="uses input/output Buffer"];

    // event dispatch
    Epoll -> Channel [label="manages (epoll_ctl)"];
    EventLoop -> Channel [label="iterates & calls handleEvent()"];
    Channel -> Connection [label="read event -> onMessage callback"];

    // helpers / tests
    Socket -> InetAddress [label="uses"];
    ClientApp -> TCPServer [label="connects to"];

    // stylistic clusters
    subgraph cluster_runtime {
        label = "Runtime components";
        style=rounded;
        EventLoop; Epoll; Channel; Connection; Buffer;
    }

}
